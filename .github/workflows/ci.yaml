name: Continuous Integration Pipeline
on:
  push:
    branches:
    - main
    tags:
    - "*"
  pull_request:
    branches:
    - main
    paths-ignore:
    - "**/*.md"
    - docs/**
    - examples/**

env:
  GORELEASER_VERSION: v2.10.2
  GOLANGCI_LINT_VERSION: v2.1.6
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        show-progress: false
    - name: Setup Golang
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version-file: go.mod
        cache: false
    - name: golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}

  test:
    name: Testing on ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        show-progress: false
    - name: Setup Golang
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version-file: go.mod
    - name: Run Test Coverage
      run: make ci

  build:
    name: Build for Supported Architectures
    runs-on: ubuntu-latest
    needs:
    - lint
    - test
    if: github.event_name != 'push'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        show-progress: false
    - name: Setup Golang
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version-file: go.mod
    - name: Setup Goreleaser
      uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
      with:
        version: ${{ env.GORELEASER_VERSION }}
        install-only: true
    - name: Run Build Multiarchitecture
      run: make build-multiarch

  publish-release:
    runs-on: ubuntu-latest
    needs:
    - lint
    - test
    if: github.event_name == 'push'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        show-progress: false
        fetch-depth: 0
    - name: Setup Golang
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version-file: go.mod
    - name: Setup Goreleaser
      uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
      with:
        version: ${{ env.GORELEASER_VERSION }}
        install-only: true
    - name: Set Snapshot Release Environment
      if: github.ref_type == 'branch'
      run: |
        echo "SNAPSHOT_RELEASE=1" >> $GITHUB_ENV
    - name: Run Goreleaser
      run: make ci-release SNAPSHOT_RELEASE=${SNAPSHOT_RELEASE}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload Binaries Artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts
        path: bin/

  publish-docker:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      packages: write
      id-token: write
    needs:
    - publish-release
    steps:
    - name: Checkout Repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        show-progress: false
    - name: Download Binaries
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: artifacts
        path: bin/
    - name: Restore Executable Permissions
      run: |
        find ./bin/{darwin,linux} -type f -exec chmod +x {} \;
    - name: Docker Login to GitHub Repository
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker Login to DockerHub
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        username: ${{ secrets.BOT_DOCKER_USERNAME }}
        password: ${{ secrets.BOT_DOCKER_TOKEN }}
    - name: Docker Login to Mia registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: nexus.mia-platform.eu
        username: ${{ secrets.NEXUS_USER }}
        password: ${{ secrets.NEXUS_TOKEN }}
    - name: Install Cosign
      uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      with:
        platforms: amd64,arm64
    - name: Configure docker metadata
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      env:
        DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest # add 'index' when we will support a multiarch image
      with:
        images: |
          ghcr.io/mia-platform/integration-connector-agent
          docker.io/miaplatform/integration-connector-agent
          nexus.mia-platform.eu/plugins/integration-connector-agent
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
        labels: |
          org.opencontainers.image.authors=Mia Platform Core Team<core@mia-platform.eu>
          org.opencontainers.image.vendor=Mia s.r.l.
        annotations: |
          org.opencontainers.image.authors=Mia Platform Core Team<core@mia-platform.eu>
          org.opencontainers.image.vendor=Mia s.r.l.
        flavor: |
          latest=auto
    - name: Setup Buildx Context
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      id: buildx
      with:
        platforms: linux/amd64,linux/arm64
    - name: Build and push
      id: docker-build
      uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        platforms: ${{ steps.buildx.outputs.platforms }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Scan image
      uses: sysdiglabs/scan-action@0065d3b93bd4115371b55720251adb1d228fe188 # v5.1.1
      with:
        image-tag: nexus.mia-platform.eu/plugins/integration-connector-agent:${{ steps.meta.outputs.version }}
        sysdig-secure-url: "https://eu1.app.sysdig.com"
        sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN }}
        registry-user: ${{ secrets.NEXUS_USER }}
        registry-password: ${{ secrets.NEXUS_TOKEN }}
        stop-on-processing-error: true
    - name: Generate SBOM
      uses: anchore/sbom-action@9f7302141466aa6482940f15371237e9d9f4c34a # v0.19.0
      if: github.ref_type == 'tag'
      with:
        artifact-name: integration-connector-agent-sbom.spdx.json
        output-file: ./integration-connector-agent-sbom.spdx.json
        image: nexus.mia-platform.eu/plugins/integration-connector-agent:${{ steps.meta.outputs.version }}
        upload-release-assets: true
    - name: GCP Auth
      uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
      if: github.ref_type == 'tag'
      with:
        project_id: ${{ secrets.MIA_PLATFORM_KMS_GCP_PROJECT }}
        workload_identity_provider: ${{ secrets.MIA_PLATFORM_WIF }}
        create_credentials_file: true
    - name: Sign image with a key
      if: github.ref_type == 'tag'
      run: |
        for tag in ${TAGS}; do
          image="${tag}@${DIGEST}"
          cosign sign --recursive --yes --key "${COSIGN_PRIVATE_KEY}" "${image}"
          cosign attest --recursive --yes --key "${COSIGN_PRIVATE_KEY}" --predicate "integration-connector-agent-sbom.spdx.json" --type="spdxjson" "${image}"
        done
      env:
        TAGS: |
          ghcr.io/mia-platform/integration-connector-agent:${{ steps.meta.outputs.version }}
          docker.io/miaplatform/integration-connector-agent:${{ steps.meta.outputs.version }}
          nexus.mia-platform.eu/plugins/integration-connector-agent:${{ steps.meta.outputs.version }}
        DIGEST: ${{ steps.docker-build.outputs.digest }}
        COSIGN_PRIVATE_KEY: ${{ secrets.MIA_PLATFORM_KEY_KMS }}
